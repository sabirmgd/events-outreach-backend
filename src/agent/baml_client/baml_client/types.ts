/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Image, Audio, Pdf, Video } from "@boundaryml/baml"
/**
 * Recursively partial type that can be null.
 *
 * @deprecated Use types from the `partial_types` namespace instead, which provides type-safe partial implementations
 * @template T The type to make recursively partial.
 */
export type RecursivePartialNull<T> = T extends object
    ? { [P in keyof T]?: RecursivePartialNull<T[P]> }
    : T | null;

export interface Checked<T,CheckName extends string = string> {
    value: T,
    checks: Record<CheckName, Check>,
}

export interface Check {
    name: string,
    expr: string
    status: "succeeded" | "failed"
}

export function all_succeeded<CheckName extends string>(checks: Record<CheckName, Check>): boolean {
    return get_checks(checks).every(check => check.status === "succeeded")
}

export function get_checks<CheckName extends string>(checks: Record<CheckName, Check>): Check[] {
    return Object.values(checks)
}
export interface Company {
  name: string
  website?: string | null
  industry?: string | null
  description?: string | null
  headquarters?: string | null
  founded?: number | null
  employeesRange?: string | null
  
}

export interface Event {
  name: string
  year: number
  dates?: string | null
  venue?: string | null
  city: string
  country?: string | null
  industry: string
  attendeeCount?: number | null
  description?: string | null
  website?: string | null
  organizer?: string | null
  type?: string | null
  
}

export interface EventWithDetails {
  event: Event
  sponsors: Sponsor[]
  speakers: Person[]
  
}

export interface Person {
  name: string
  title?: string | null
  company?: string | null
  email?: string | null
  phone?: string | null
  linkedinUrl?: string | null
  bio?: string | null
  location?: string | null
  expertise?: string[] | null
  sessionType?: string | null
  topic?: string | null
  role?: string | null
  
}

export interface Sponsor {
  company: Company
  sponsorshipTier?: string | null
  
}
