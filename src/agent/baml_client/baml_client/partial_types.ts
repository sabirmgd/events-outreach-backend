/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Image, Audio, Pdf, Video } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type {  Company,  Event,  EventWithDetails,  Person,  Sponsor } from "./types"
import type * as types from "./types"

/******************************************************************************
*
*  These types are used for streaming, for when an instance of a type
*  is still being built up and any of its fields is not yet fully available.
*
******************************************************************************/

export interface StreamState<T> {
  value: T
  state: "Pending" | "Incomplete" | "Complete"
}

export namespace partial_types {
    export interface Company {
      name?: string | null
      website?: string | null
      industry?: string | null
      description?: string | null
      headquarters?: string | null
      founded?: number | null
      employeesRange?: string | null
    }
    export interface Event {
      name?: string | null
      year?: number | null
      dates?: string | null
      venue?: string | null
      city?: string | null
      country?: string | null
      industry?: string | null
      attendeeCount?: number | null
      description?: string | null
      website?: string | null
      organizer?: string | null
      type?: string | null
    }
    export interface EventWithDetails {
      event?: Event | null
      sponsors: Sponsor[]
      speakers: Person[]
    }
    export interface Person {
      name?: string | null
      title?: string | null
      company?: string | null
      email?: string | null
      phone?: string | null
      linkedinUrl?: string | null
      bio?: string | null
      location?: string | null
      expertise?: string[] | null
      sessionType?: string | null
      topic?: string | null
      role?: string | null
    }
    export interface Sponsor {
      company?: Company | null
      sponsorshipTier?: string | null
    }
}